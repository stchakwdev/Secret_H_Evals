#!/bin/bash
# Smart Secret Hitler Game Launcher
# Automatically detects Python environment and handles dependencies

set -e  # Exit on any error

# Color codes for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Script directory
SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
PYTHON_SCRIPT="$SCRIPT_DIR/play_hybrid.py"
REQUIREMENTS="$SCRIPT_DIR/requirements.txt"

echo -e "${BLUE}üéÆ Secret Hitler - Smart Launcher${NC}"
echo -e "${BLUE}=================================${NC}"

# Function to check if a command exists
command_exists() {
    command -v "$1" >/dev/null 2>&1
}

# Function to test Python installation with required modules
test_python() {
    local python_cmd="$1"
    
    # Check if Python exists
    if ! command_exists "$python_cmd"; then
        return 1
    fi
    
    # Check Python version (need 3.7+)
    local version=$($python_cmd -c "import sys; print(f'{sys.version_info.major}.{sys.version_info.minor}')" 2>/dev/null || echo "0.0")
    local major=$(echo $version | cut -d. -f1)
    local minor=$(echo $version | cut -d. -f2)
    
    if [[ $major -lt 3 ]] || [[ $major -eq 3 && $minor -lt 7 ]]; then
        return 1
    fi
    
    # Test critical modules
    $python_cmd -c "import asyncio, websockets, json, logging" >/dev/null 2>&1
    return $?
}

# Function to install requirements
install_requirements() {
    local python_cmd="$1"
    local pip_cmd="${python_cmd%python*}pip"
    
    # Try different pip variants
    for pip in "$pip_cmd" "${python_cmd%python*}pip3" "pip" "pip3"; do
        if command_exists "$pip"; then
            echo -e "${YELLOW}üì¶ Installing dependencies with $pip...${NC}"
            
            # Try to install requirements
            if $pip install -r "$REQUIREMENTS" --quiet --user; then
                echo -e "${GREEN}‚úÖ Dependencies installed successfully${NC}"
                return 0
            elif $pip install -r "$REQUIREMENTS" --quiet; then
                echo -e "${GREEN}‚úÖ Dependencies installed successfully${NC}"
                return 0
            fi
        fi
    done
    
    echo -e "${YELLOW}‚ö†Ô∏è  Could not install dependencies automatically${NC}"
    echo -e "${YELLOW}   Please run: pip install -r requirements.txt${NC}"
    return 1
}

# Array of Python commands to try (in order of preference)
PYTHON_CANDIDATES=(
    "/Library/Frameworks/Python.framework/Versions/3.11/bin/python3"  # macOS system Python 3.11
    "/usr/local/bin/python3"      # Homebrew Python
    "/opt/anaconda3/bin/python"   # Anaconda
    "/opt/miniconda3/bin/python"  # Miniconda
    "python3.11"                  # System Python 3.11
    "python3.10"                  # System Python 3.10
    "python3.9"                   # System Python 3.9
    "python3"                     # Generic Python 3
    "python"                      # Fallback
)

echo -e "${YELLOW}üîç Detecting Python environment...${NC}"

FOUND_PYTHON=""
NEED_INSTALL=0

# Test each Python candidate
for python_cmd in "${PYTHON_CANDIDATES[@]}"; do
    if test_python "$python_cmd"; then
        FOUND_PYTHON="$python_cmd"
        echo -e "${GREEN}‚úÖ Found working Python: $python_cmd${NC}"
        break
    elif command_exists "$python_cmd"; then
        # Python exists but missing modules
        FOUND_PYTHON="$python_cmd" 
        NEED_INSTALL=1
        echo -e "${YELLOW}‚ö†Ô∏è  Found Python with missing modules: $python_cmd${NC}"
        break
    fi
done

# If no Python found, exit with helpful message
if [[ -z "$FOUND_PYTHON" ]]; then
    echo -e "${RED}‚ùå No suitable Python installation found${NC}"
    echo -e "${RED}   Please install Python 3.7+ and websockets module${NC}"
    echo -e "${RED}   Try: pip install websockets${NC}"
    exit 1
fi

# Install dependencies if needed
if [[ $NEED_INSTALL -eq 1 ]]; then
    echo -e "${YELLOW}üì¶ Installing missing dependencies...${NC}"
    install_requirements "$FOUND_PYTHON"
    
    # Test again after installation
    if ! test_python "$FOUND_PYTHON"; then
        echo -e "${RED}‚ùå Installation failed or incomplete${NC}"
        echo -e "${RED}   Please manually install: pip install -r requirements.txt${NC}"
        exit 1
    fi
fi

# Check for .env file
if [[ ! -f "$SCRIPT_DIR/.env" ]]; then
    echo -e "${YELLOW}‚ö†Ô∏è  No .env file found${NC}"
    echo -e "${YELLOW}   Please create .env with your OPENROUTER_API_KEY${NC}"
    echo -e "${YELLOW}   Example: OPENROUTER_API_KEY=sk-or-v1-your-key-here${NC}"
fi

# Launch the game
echo -e "${GREEN}üöÄ Launching Secret Hitler Hybrid Game...${NC}"
echo -e "${GREEN}   Using: $FOUND_PYTHON${NC}"
echo ""

# Pass all arguments to the Python script
exec "$FOUND_PYTHON" "$PYTHON_SCRIPT" "$@"